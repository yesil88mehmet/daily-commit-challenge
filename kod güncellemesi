import cv2
import networkx as nx
import matplotlib.pyplot as plt
from ultralytics import YOLO
from deep_sort_realtime.deepsort_tracker import DeepSort
from collections import defaultdict, deque

# YOLOv8 modelini yükle (basketbol oyuncuları ve topu tespit eden model)
model = YOLO("yolov8n.pt")  # istersen özel eğitimli modelini koyabilirsin

# Deep SORT tracker başlat
tracker = DeepSort(max_age=15)

# Video dosyasını yükle
video_path = "basketbol_mac.mp4"
cap = cv2.VideoCapture(video_path)

# Pas ağı grafiği
G = nx.DiGraph()

# Her oyuncunun pozisyon geçmişi ve pas sayacı
player_positions = dict()
pass_count = defaultdict(int)

# Topun önceki sahibi (başlangıçta yok)
previous_ball_owner = None

# Oyuncu kimliği için kuyruğu (top yakınlığı analizi için)
recent_possession = deque(maxlen=10)

# Frame döngüsü
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    results = model(frame, verbose=False)[0]
    detections = []

    for box in results.boxes:
        cls_id = int(box.cls[0])
        conf = float(box.conf[0])
        x1, y1, x2, y2 = map(int, box.xyxy[0])

        label = model.names[cls_id]

        # Sadece oyuncu (person) ve top (sports ball) nesneleri ile ilgileniyoruz
        if label in ["person", "sports ball"] and conf > 0.4:
            detections.append(([x1, y1, x2 - x1, y2 - y1], conf, label))

    # Deep SORT formatına uygun giriş (sadece oyuncular için)
    player_detections = [ (bbox, conf, label) for bbox, conf, label in detections if label == "person" ]
    tracks = tracker.update_tracks([d[:2] for d in player_detections], frame=frame)

    # Tespit edilen topu bul
    ball_box = None
    for bbox, conf, label in detections:
        if label == "sports ball":
            ball_box = bbox
            break

    # Tüm oyuncuların merkezi
    players_centroids = {}
    for track in tracks:
        if not track.is_confirmed():
            continue
        track_id = track.track_id
        ltrb = track.to_ltrb()
        x1, y1, x2, y2 = map(int, ltrb)
        cx, cy = (x1 + x2) // 2, (y1 + y2) // 2
        players_centroids[track_id] = (cx, cy)

        # Oyuncunun son pozisyonunu kaydet
        player_positions[track_id] = (cx, cy)

        # Görüntüye çizim
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(frame, f"ID {track_id}", (x1, y1 - 5),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

    # Topun sahibi (en yakın oyuncu)
    current_ball_owner = None
    if ball_box:
        bx, by, bw, bh = ball_box
        ball_cx, ball_cy = bx + bw // 2, by + bh // 2
        cv2.circle(frame, (ball_cx, ball_cy), 10, (0, 0, 255), -1)

        min_dist = float('inf')
        for pid, (px, py) in players_centroids.items():
            dist = ((ball_cx - px) ** 2 + (ball_cy - py) ** 2) ** 0.5
            if dist < min_dist and dist < 100:  # 100 piksel sınırı (uygulanabilir)
                min_dist = dist
                current_ball_owner = pid

        if current_ball_owner is not None:
            cv2.putText(frame, f"Ball owner: ID {current_ball_owner}", (20, 30),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)

    # Pas tespiti (sahip değiştiyse pas olmuş demektir)
    if previous_ball_owner is not None and current_ball_owner is not None:
        if previous_ball_owner != current_ball_owner:
            pass_count[(previous_ball_owner, current_ball_owner)] += 1
            G.add_edge(previous_ball_owner, current_ball_owner, weight=pass_count[(previous_ball_owner, current_ball_owner)])

    if current_ball_owner is not None:
        previous_ball_owner = current_ball_owner

    # Pas ağı grafiğini görüntüye çiz (sol üst köşeye)
    fig, ax = plt.subplots(figsize=(3, 3))
    ax.set_title("Pas Ağı")
    pos = nx.spring_layout(G)
    nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=500, ax=ax)
    edge_labels = nx.get_edge_attributes(G, 'weight')
    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, ax=ax)
    fig.canvas.draw()

    graph_img = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
    graph_img = graph_img.reshape(fig.canvas.get_width_height()[::-1] + (3,))
    plt.close(fig)

    # Grafiği küçült ve görüntüye koy
    graph_img = cv2.resize(graph_img, (200, 200))
    frame[0:200, 0:200] = graph_img

    # Görüntüyü göster
    cv2.imshow("Basketbol Pas Analizi", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
